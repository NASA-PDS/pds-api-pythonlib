# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.reference import Reference  # noqa: F401,E501
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None, title: str=None, description: str=None, observing_system_components: List[Reference]=None, targets: List[str]=None, pds4_label_url: str=None, properties: Dict[str, object]=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param id: The id of this Product.  # noqa: E501
        :type id: str
        :param type: The type of this Product.  # noqa: E501
        :type type: str
        :param title: The title of this Product.  # noqa: E501
        :type title: str
        :param description: The description of this Product.  # noqa: E501
        :type description: str
        :param observing_system_components: The observing_system_components of this Product.  # noqa: E501
        :type observing_system_components: List[Reference]
        :param targets: The targets of this Product.  # noqa: E501
        :type targets: List[str]
        :param pds4_label_url: The pds4_label_url of this Product.  # noqa: E501
        :type pds4_label_url: str
        :param properties: The properties of this Product.  # noqa: E501
        :type properties: Dict[str, object]
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'title': str,
            'description': str,
            'observing_system_components': List[Reference],
            'targets': List[str],
            'pds4_label_url': str,
            'properties': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'title': 'title',
            'description': 'description',
            'observing_system_components': 'observing_system_components',
            'targets': 'targets',
            'pds4_label_url': 'pds4_label_url',
            'properties': 'properties'
        }
        self._id = id
        self._type = type
        self._title = title
        self._description = description
        self._observing_system_components = observing_system_components
        self._targets = targets
        self._pds4_label_url = pds4_label_url
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Product.

        identifier lidvid of the collection  # noqa: E501

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Product.

        identifier lidvid of the collection  # noqa: E501

        :param id: The id of this Product.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Product.


        :return: The type of this Product.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Product.


        :param type: The type of this Product.
        :type type: str
        """

        self._type = type

    @property
    def title(self) -> str:
        """Gets the title of this Product.


        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Product.


        :param title: The title of this Product.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Product.


        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Product.


        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def observing_system_components(self) -> List[Reference]:
        """Gets the observing_system_components of this Product.

        list of instruments or procedures generating the data (for concept see https://en.wikipedia.org/wiki/Observations_and_Measurements)  # noqa: E501

        :return: The observing_system_components of this Product.
        :rtype: List[Reference]
        """
        return self._observing_system_components

    @observing_system_components.setter
    def observing_system_components(self, observing_system_components: List[Reference]):
        """Sets the observing_system_components of this Product.

        list of instruments or procedures generating the data (for concept see https://en.wikipedia.org/wiki/Observations_and_Measurements)  # noqa: E501

        :param observing_system_components: The observing_system_components of this Product.
        :type observing_system_components: List[Reference]
        """

        self._observing_system_components = observing_system_components

    @property
    def targets(self) -> List[str]:
        """Gets the targets of this Product.

        identifier lidvid of the target of or feature of interest the observation (for concept see https://en.wikipedia.org/wiki/Observations_and_Measurements)  # noqa: E501

        :return: The targets of this Product.
        :rtype: List[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets: List[str]):
        """Sets the targets of this Product.

        identifier lidvid of the target of or feature of interest the observation (for concept see https://en.wikipedia.org/wiki/Observations_and_Measurements)  # noqa: E501

        :param targets: The targets of this Product.
        :type targets: List[str]
        """

        self._targets = targets

    @property
    def pds4_label_url(self) -> str:
        """Gets the pds4_label_url of this Product.


        :return: The pds4_label_url of this Product.
        :rtype: str
        """
        return self._pds4_label_url

    @pds4_label_url.setter
    def pds4_label_url(self, pds4_label_url: str):
        """Sets the pds4_label_url of this Product.


        :param pds4_label_url: The pds4_label_url of this Product.
        :type pds4_label_url: str
        """

        self._pds4_label_url = pds4_label_url

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this Product.


        :return: The properties of this Product.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this Product.


        :param properties: The properties of this Product.
        :type properties: Dict[str, object]
        """

        self._properties = properties
